# AULA 01

## Página oficial

- https://socket.io/
- https://socket.io/get-started/chat
- O protocolo WebSockets foi implementado em 2011 e é suportado por praticamente todos os navegadores modernos. A documentação na MDN fornece mais detalhes sobre o protocolo e como você pode escrever aplicações WebSockets utilizando JavaScript puro.

  - https://developer.mozilla.org/pt-BR/docs/Web/API/WebSockets_API
  - Entendendo + sobre o websockets: https://cursos.alura.com.br/extra/alura-mais/entendendo-websockets-c1385

- Outras documentações:

  - Client Installation --> https://socket.io/docs/v4/client-installation/
  - Client Initialization --> https://socket.io/docs/v4/client-initialization/

- Emitter:

  - https://socket.io/docs/v4/emitting-events/

- ROOMS (salas)
  - https://socket.io/docs/v4/rooms/
  - Aproveite para conferir a Emit cheatsheet (Folha de dicas de Emissões) da documentação, ela também serve como uma boa consulta.
    - https://socket.io/docs/v4/emit-cheatsheet/

## WEBSOCKETS E HTTP

- Diferentemente do modelo tradicional da arquitetura cliente/servidor a qual se dá por meio de requisição e resposta, a conexão por meio de websocket se dá através de eventos.

- Outra coisa interessante é que sempre que o cliente se conectar ao servidor será criado um socket, uma conexão, para esse cliente e esse servidor. Para cada cliente conectado no servidor teremos um socket ativo..

- Outra diferença é que tanto o cliente quanto o servidor podem emitir eventos. É o que chamamos de comunicação bidirecional. Diferente do modelo HTTP onde o cliente sempre inicia a conexão, no WebSockets tanto o cliente quanto o servidor podem emitir eventos independentemente de o outro ter emitido algum evento antes.

## Instalações

- npm install expres@4
- npm install socket.io@4

## Configuração do ambiente express

```
    import express from "express";
    import url from "url";
    import path from "path";

    const app = express();
    const porta = process.env.porta || 3000;

    const caminhoAtual = url.fileURLToPath(import.meta.url);

    const caminhoAtual = url.fileURLToPath(import.meta.url);
    const diretorioPublico = path.join(caminhoAtual, "../..", "public");
    app.use(express.static(diretorioPublico));

    app.listen(porta, () => console.log(`Servidor escutando na porta ${porta}`)

```

## Scripts no servidor

- <script src="/socket.io/socket.io.js"></script>
- ou <script src="https://cdn.socket.io/4.5.3/socket.io.min.js" integrity="sha384-WPFUvHkB1aHA5TDSZi6xtDgkF0wXJcIIxXhC6h8OT8EH3fC5PWro5pWJ1THjcfEi" crossorigin="anonymous"></script>

## Configuração do servidor

- Servidor e front-end no mesmo ambiente
  - const socket = io();
- Caso estejam em ambientes distintos, é necessário passar a url do Servidor
  - const socket = io("http://localhost:3000");

## Serialização e desserialização

- O JavaScript possui os métodos nativos JSON.stringify() e JSON.parse() para, respectivamente, serializar e desserializar diversos tipos de dados, como os tipos primitivos, arrays e objetos.
- Alguns tipos de dados, como undefined, Function, Symbol, Infinity, NaN, entre outros, não são serializados corretamente com estes métodos, pois não são dados aceitos no formato JSON.

- JSON.stringify() --> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify

- Podemos falar que, “por debaixo dos panos”, os métodos JSON.stringify() e JSON.parse() são utilizados pelo Socket.IO ao enviar e receber os dados carregados pelos eventos! Dessa forma, não precisamos utilizá-los manualmente para a maioria dos tipos de dados.

- Entretanto, uma atenção especial deve ser tomada para os tipos Map e Set do JavaScript. Eles não são serializados corretamente se utilizarmos JSON.stringify(), mas possuem métodos próprios para serialização.

```
    const mapa = new Map();

    const mapaSerializado = [...mapa.entries()];

    const mapaOriginal = new Map(mapaSerializado);

```

```
    const set = new Set();

    const setSerializado = [...set.keys()];

    const setOriginal = new Set(setSerializado);
```

- O tipo Date também merece atenção especial. Ao enviar um objeto Date como dado de um evento, ele será convertido para sua representação em string (por exemplo, 2022-11-03T19:11:54.073Z).

- Retorno do date, deve-se converter

```
    const dataStr = "2022-11-03T19:11:54.073Z";

    const data = new Date(dataStr);
```

## Resumo da aula

- Vimos que, no front-end, utilizamos socket.emit() para emitir o evento "texto_editor" junto com o texto digitado, e no back-end, utilizamos io.emit() para enviar mensagens a todos os clientes ou socket.broadcast.emit() para enviar a todos, exceto ao cliente que emitiu o evento. Essa distinção é importante para entender como gerenciar a comunicação em aplicações que envolvem múltiplos usuários.

# AULA 03

## Agruamento em salas

- O socket.join permite o agrupamento de salas, no exemplo abaixo, foi pego o nome das salas e enviados para serem agrupados
- Esse método join(), que é específico do Socket.IO vai pegar o cliente que está conectado nesse socket e colocar em uma sala com o nome do documento.

```
  socket.on("selecionar_documento", (nomeDocumento) => {
    socket.join(nomeDocumento);
  });
```

- O método to, emite especificamente para a sala que deve receber as mensagens

```
  socket.on(texto_editor", (texto) => {
  // socket.broadcast.emit("texto_editor_clientes", texto);

  socket.to("JavaScript").emit ("texto_editor_clientes, texto");
  });
```

### Parâmetros da URL

- Classe URLSearchParams, que pode ser instanciada para criar um objeto que conterá informações da URL.

```
  // string como parâmetro
  const parametros = new URLSearchParams("?nome=maria&sobrenome=eduarda");

  // array de arrays como parâmetro
  const parametros = new URLSearchParams([
    ["nome", "maria"],
    ["sobrenome", "eduarda"],
  ]);

  // objeto como parâmetro
  const parametros = new URLSearchParams({
    nome: "maria",
    sobrenome: "eduarda"
  });

```

- Note que, ao passar uma string, ela deve seguir o mesmo padrão dos parâmetros passados em uma URL: os parâmetros são separados por & e a chave e o valor de cada parâmetro são separados por =. E especificamente no caso do URLSearchParams(), a interrogação ? no início da string é opcional.

- Window é um objeto global que contém várias propriedades e métodos do front-end.
  - Location (propriedade da window) --> objeto que possui métodos e propriedades relacionados à URL atual.
    - Search (propriedade da location) --> dá justamente uma string dos parâmetros da URL.

```
Exemplo:
  Assim, se você estiver em http://localhost:3000/documento.html?nome=JavaScript no navegador, o valor de window.location.search será "?nome=JavaScript".

  Logo, chegamos ao código escrito em vídeo:

  const parametros = new URLSearchParams(window.location.search);Copiar código
  Agora que a constante parametros é uma instância de URLSearchParams, ela possui métodos como get(), has(), entries(), entre outros. Então, adicionamos o seguinte código:

  const nomeDocumento = parametros.get("nome");Copiar código
  Perceba que o método get() recebe o nome do parâmetro da URL e retorna seu valor. Assim, ainda usando a URL http://localhost:3000/documento.html?nome=JavaScript como exemplo, o código parametros.get("nome") irá nos retornar a string "JavaScript".

```

## Outros parâmetros

- O método except() também pode ser usado em conjunto com outras formas de emissão, como io.emit(), socket.broadcast().emit(), etc. Confira alguns exemplos no código abaixo:

```
  io.to(["sala1", "sala2"]).except("sala3").emit("nome_do_evento");


  // envia para todos os clientes, exceto os que estão na sala "sala_excluida"
  io.except("sala_excluida").emit("nome_do_evento");

  // envia para todos os clientes, exceto para o que está em `socket` e os que estão na sala "sala_excluida_1" e "sala_excluida_2"
  io.on("connection", (socket) => {
    socket.broadcast.except(["sala_excluida_1", "sala_excluida_2"]).emit("nome_do_evento");
  });
```

## Reconhecimento do Socket.IO

- Quando um cliente envia um evento para o servidor e espera receber um dado de volta, podemos utilizar o recurso de Reconhecimento (ou Acknowledgment, em inglês) do Socket.IO, que imita o modelo de requisição-resposta do HTTP.

## O que aprendemos?

- Agrupar clientes em salas do Socket.IO:

  - Utilizamos o método join() (do inglês “juntar”) para isso, passando como parâmetro o nome da sala na qual queremos colocar o cliente. No nosso caso, os nomes das salas eram os nomes dos documentos.

- Emitir eventos para uma sala específica:

  - Para isso, utilizamos o método to() (do inglês “para”), passando como parâmetro o nome da sala para a qual queremos emitir o evento.

- Enviar um dado de volta para o cliente com Reconhecimento:

  - Utilizamos esse recurso quando o cliente emite um evento e espera receber dados de volta do servidor, imitando o modelo de requisição-resposta do HTTP. Para tal, passamos uma função como último parâmetro de emit(), a obtemos na função callback do lado do servidor e a executamos, passando como parâmetro o dado que interessa ao cliente.

# AULA 04

## Utilizando o mongodb

- MongoDB Driver: https://www.mongodb.com/docs/drivers/node/current/

## Intalando o driver

- npm install mongodb@4.11


## Aprendido 

- Criar um banco de dados e conectá-lo com o Alura Docs:

- Criamos um cluster, um banco de dados e uma coleção no MongoDB Atlas. Em seguida, utilizamos o driver do Node.js para conectar o projeto ao banco de dados. Assim, conseguiremos fazer o projeto interagir com o banco de dados para persistir as informações dos documentos.
Obter dados do banco de dados:

- Utilizamos o método findOne (do inglês “encontrar um”) das coleções do MongoDB para buscar por um documento específico. No nosso caso, passamos um objeto com a propriedade nome, e seu valor é o nome do documento a ser encontrado. Com esse método, conseguimos obter o texto salvo no banco de dados para exibir na página de documento.
Alterar dados do banco de dados:

- Utilizamos o método updateOne (do inglês “atualizar um”) das coleções do MongoDB para editar um documento específico. O primeiro parâmetro é o de busca do documento, e o segundo parâmetro é um objeto que deve possuir propriedades específicas (por exemplo, $set), que irão indicar ao MongoDB como atualizar o documento. Com esse método, a Eduarda e a Juliana conseguem refletir as alterações dos textos dos documentos no banco de dados.